/*
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package cryptolib

import (
	"bytes"
	"io/ioutil"

	"github.com/pkg/errors"
	"golang.org/x/crypto/openpgp"
	"golang.org/x/crypto/openpgp/armor"
)

type pgpVerifierImpl struct{}

// verifyPgp verifies a PGP signature using a public key and outputs the
// payload that was signed. `signature` is an ASCII-armored "attached"
// signature, generated by `gpg --armor --sign --output signature payload`.
// `publicKey` is an ASCII-armored PGP key.
func (v pgpVerifierImpl) verifyPgp(signature, publicKey []byte) ([]byte, error) {
	keyring, err := openpgp.ReadArmoredKeyRing(bytes.NewReader(publicKey))
	if err != nil {
		return nil, errors.Wrap(err, "error reading armored key ring")
	}

	armorBlock, err := armor.Decode(bytes.NewReader(signature))
	if err != nil {
		return nil, errors.Wrap(err, "error decoding armored signature")
	}

	messageDetails, err := openpgp.ReadMessage(armorBlock.Body, keyring, nil, nil)
	if err != nil {
		return nil, errors.Wrap(err, "error reading armor signature")
	}

	// MessageDetails.UnverifiedBody signature is not verified until we read it.
	// This will call PublicKey.VerifySignature for the keys in the keyring.
	payload, err := ioutil.ReadAll(messageDetails.UnverifiedBody)
	if err != nil {
		return nil, errors.Wrap(err, "could not verify armor signature")
	}

	// Make sure after reading the UnverifiedBody above, there is no signature error.
	if messageDetails.SignatureError != nil {
		return nil, errors.Wrap(messageDetails.SignatureError, "bad signature found")
	}
	if messageDetails.Signature == nil {
		return nil, errors.New("no signature found for given key")
	}
	return payload, nil
}
